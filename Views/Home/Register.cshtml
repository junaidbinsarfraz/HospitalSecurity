@using HospitalManagament.Models
@model HospitalManagament.Models.SignupModel
@{
    ViewBag.Title = "Register";
    Layout = "~/Views/Shared/_LayoutLogin.cshtml";
}

@section Style {

    <style>
        ul {
            list-style: none;
            padding: 0;
        }

        .registration {
            background-color: #fff;
            max-width: 600px;
            margin: 0 auto;
            padding-bottom: 20px;
            box-shadow: 1px 1px 5px 0px rgba(0,0,0,0.3);
            border-bottom: 5px solid #ffdb3a;
        }


        .input-requirements {
            font-size: 1.3rem;
            font-style: italic;
            text-align: left;
            list-style: disc;
            list-style-position: inside;
            max-width: 400px;
            margin: 10px auto;
            color: rgb(150,150,150);
        }


            .input-requirements li.invalid {
                color: #e74c3c;
            }

            .input-requirements li.valid {
                color: #2ecc71;
            }

                .input-requirements li.valid:after {
                    display: inline-block;
                    padding-left: 10px;
                    content: "\2713";
                }
    </style>

}

<div class="login-box">
    <div class="white-box">
        @using reCAPTCHA.MVC
        @using (Html.BeginForm("Register", "Home", FormMethod.Post, new { @class = "form-horizontal form-material", @id = "registerform", data_toggle = "validator" }))
        {
            <a href="javascript:void(0)" class="text-center db"><img src="../plugins/images/eliteadmin-logo-dark.png" alt="Home" /><br /><img src="../plugins/images/eliteadmin-text-dark.png" alt="Home" /></a>

            <div class="form-group m-t-20 @((!ViewData.ModelState.IsValid && ViewData.ModelState["Email"].Errors.Count > 0) ? "has-danger has-error": String.Empty)">
                <div class="col-xs-12">
                    @Html.TextBoxFor(u => u.Email, new
               {
                   @class = "form-control form-control-success",
                   @placeholder = "Email",
                   @required = "required",
                   @type = "email"
               })
                    <span style="color:red;">@Html.ValidationMessage("Email")</span>
                </div>
            </div>
            <div class="form-group @((!ViewData.ModelState.IsValid && ViewData.ModelState["Password"].Errors.Count > 0) ? "has-danger has-error": String.Empty)">
                <div class="col-xs-12">
                    <label for="password">
                        @Html.PasswordFor(u => u.Password, new
                   {
                       @id = "password",
                       @class = "form-control form-control-danger",
                       @placeholder = "Password",
                       @required = "required"
                   })
                        @*<small>Atleast the password should be 2 uppercases, 1 special case, 2 digits, 3 lower case and length 8</small>*@
                        <ul class="input-requirements">
                            <li><small>At least 8 characters long (and less than 100 characters)</small></li>
                            <li><small>Contains at least 2 numbers</small></li>
                            <li><small>Contains at least 3 lowercase letters</small></li>
                            <li><small>Contains at least 2 uppercase letters</small></li>
                            <li><small>Contains a special character (e.g. @@ !)</small></li>
                        </ul>
                    </label>
                    <br />
                    <span style="color:red;">@Html.ValidationMessage("Password")</span>
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-12">
                    @Html.PasswordFor(u => u.ConfirmPassword, new { @id = "password_repeat", @class = "form-control", @placeholder = "Confirm Password", @required = "required" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-12">
                    @Html.TextBoxFor(u => u.ContactNo, new { @class = "form-control", @placeholder = "Contact No. +923215761206", @required = "required" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-12">
                    @Html.DropDownListFor(m => m.signupAs,
                    new SelectList(Enum.GetValues(typeof(SignupAs))),
                 "Select Signup As", new { @class = "form-control", @placeholder = "Confirm Password", @required = "required" })
                </div>
            </div>
            @*<div class="g-recaptcha" data-sitekey="6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI"></div>*@
            @*<div class="g-recaptcha" data-sitekey="6LdBXCQUAAAAAL6LpxH874tlfEwSasuJWn5cBCcG"></div>*@
            @Html.Recaptcha()
            @*@Html.ValidationMessage("ReCaptcha")*@
            <div style="color:red; margin-top: 0.5em;">
                @Html.ValidationMessage("ReCaptcha");
            </div>
            <div class="form-group text-center m-t-20">
                <div class="col-xs-12">
                    <button class="btn btn-info btn-lg btn-block text-uppercase waves-effect waves-light" type="submit">Register</button>
                </div>
            </div>
            <div class="form-group m-b-0">
                <div class="col-sm-12 text-center">
                    <p>Already have an 	account? <a href="~/Home/Login" class="text-primary m-l-5"><b>Sign In</b></a></p>
                </div>
            </div>
        }
    </div>
</div>
@section Scripts {

    <script>

        /* ----------------------------

    CustomValidation prototype

    - Keeps track of the list of invalidity messages for this input
    - Keeps track of what validity checks need to be performed for this input
    - Performs the validity checks and sends feedback to the front end

---------------------------- */

        function CustomValidation() {
            this.invalidities = [];
            this.validityChecks = [];
        }

        CustomValidation.prototype = {
            addInvalidity: function (message) {
                this.invalidities.push(message);
            },
            getInvalidities: function () {
                return this.invalidities.join('. \n');
            },
            checkValidity: function (input) {
                for (var i = 0; i < this.validityChecks.length; i++) {

                    var isInvalid = this.validityChecks[i].isInvalid(input);
                    if (isInvalid) {
                        this.addInvalidity(this.validityChecks[i].invalidityMessage);
                    }

                    var requirementElement = this.validityChecks[i].element;
                    if (requirementElement) {
                        if (isInvalid) {
                            requirementElement.classList.add('invalid');
                            requirementElement.classList.remove('valid');
                        } else {
                            requirementElement.classList.remove('invalid');
                            requirementElement.classList.add('valid');
                        }

                    } // end if requirementElement
                } // end for
            }
        };



        /* ----------------------------

            Validity Checks

            The arrays of validity checks for each input
            Comprised of three things
                1. isInvalid() - the function to determine if the input fulfills a particular requirement
                2. invalidityMessage - the error message to display if the field is invalid
                3. element - The element that states the requirement

        ---------------------------- */

        var usernameValidityChecks = [
            {
                isInvalid: function (input) {
                    return input.value.length < 3;
                },
                invalidityMessage: 'This input needs to be at least 3 characters',
                element: document.querySelector('label[for="username"] .input-requirements li:nth-child(1)')
            },
            {
                isInvalid: function (input) {
                    var illegalCharacters = input.value.match(/[^a-zA-Z0-9]/g);
                    return illegalCharacters ? true : false;
                },
                invalidityMessage: 'Only letters and numbers are allowed',
                element: document.querySelector('label[for="username"] .input-requirements li:nth-child(2)')
            }
        ];

        var passwordValidityChecks = [
            {
                isInvalid: function (input) {
                    return input.value.length < 8 | input.value.length > 100;
                },
                invalidityMessage: 'This input needs to be between 8 and 100 characters',
                element: document.querySelector('label[for="password"] .input-requirements li:nth-child(1)')
            },
            {
                isInvalid: function (input) {
                    return !input.value.match(/[0-9][0-9]/g);
                },
                invalidityMessage: 'At least 2 numbers are required',
                element: document.querySelector('label[for="password"] .input-requirements li:nth-child(2)')
            },
            {
                isInvalid: function (input) {
                    return !input.value.match(/[a-z][a-z][a-z]/g);
                },
                invalidityMessage: 'At least 3 lowercase letters are required',
                element: document.querySelector('label[for="password"] .input-requirements li:nth-child(3)')
            },
            {
                isInvalid: function (input) {
                    return !input.value.match(/[A-Z][A-Z]/g);
                },
                invalidityMessage: 'At least 2 uppercase letters are required',
                element: document.querySelector('label[for="password"] .input-requirements li:nth-child(4)')
            },
            {
                isInvalid: function (input) {
                    return !input.value.match(/[\!\@@\#\$\&\*]/g);
                },
                invalidityMessage: 'You need one of the required special characters',
                element: document.querySelector('label[for="password"] .input-requirements li:nth-child(5)')
            }
        ];

        var passwordRepeatValidityChecks = [
            {
                isInvalid: function () {
                    return passwordRepeatInput.value != passwordInput.value;
                },
                invalidityMessage: 'This password needs to match the first one'
            }
        ];



        /* ----------------------------

            Check this input

            Function to check this particular input
            If input is invalid, use setCustomValidity() to pass a message to be displayed

        ---------------------------- */

        function checkInput(input) {

            input.CustomValidation.invalidities = [];
            input.CustomValidation.checkValidity(input);

            if (input.CustomValidation.invalidities.length == 0 && input.value != '') {
                input.setCustomValidity('');
            } else {
                var message = input.CustomValidation.getInvalidities();
                input.setCustomValidity(message);
            }
        }



        /* ----------------------------

            Setup CustomValidation

            Setup the CustomValidation prototype for each input
            Also sets which array of validity checks to use for that input

        ---------------------------- */

        //var usernameInput = document.getElementById('username');
        var passwordInput = document.getElementById('password');
        var passwordRepeatInput = document.getElementById('password_repeat');

        //usernameInput.CustomValidation = new CustomValidation();
        //usernameInput.CustomValidation.validityChecks = usernameValidityChecks;

        passwordInput.CustomValidation = new CustomValidation();
        passwordInput.CustomValidation.validityChecks = passwordValidityChecks;

        passwordRepeatInput.CustomValidation = new CustomValidation();
        passwordRepeatInput.CustomValidation.validityChecks = passwordRepeatValidityChecks;




        /* ----------------------------

            Event Listeners

        ---------------------------- */

        var inputs = document.querySelectorAll('input:not([type="submit"])');
        var submit = document.querySelector('button[type="submit"]');

        for (var i = 0; i < inputs.length; i++) {
            inputs[i].addEventListener('keyup', function () {
                checkInput(this);
            });
        }

        submit.addEventListener('click', function () {
            for (var i = 0; i < inputs.length; i++) {
                checkInput(inputs[i]);
            }
        });

    </script>
}